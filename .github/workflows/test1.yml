name: Sync SQL File on PR

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'LS_Admin_API/src/main/resources/sql/*.sql'

jobs:
  validate-and-sync:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the current repository
      - name: Checkout current repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      # Step 2: Verify exactly 1 SQL file was changed
      - name: Validate SQL file changes
        id: validate-sql
        run: |
          echo "Checking for SQL file changes in PR..."
          
          # Get all changed files in the PR
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- 'LS_Admin_API/src/main/resources/sql/*.sql')
          echo "Changed SQL files: $FILES"
          
          # Count SQL files
          SQL_COUNT=$(echo "$FILES" | wc -l | tr -d ' ')
          echo "SQL file count: $SQL_COUNT"
          
          if [ "$SQL_COUNT" -eq 0 ]; then
            echo "::warning::No SQL files changed in this PR"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$SQL_COUNT" -gt 1 ]; then
            echo "::error::Only 1 SQL file change allowed per PR. Found: $SQL_COUNT"
            exit 1
          else
            echo "Found 1 SQL file change"
            echo "sql_file=${FILES}" >> $GITHUB_OUTPUT
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

      # Only continue if exactly 1 SQL file was changed
      - name: Checkout target repository
        if: steps.validate-sql.outputs.should_skip == 'false'
        uses: actions/checkout@v3
        with:
          repository: klfmedia/flyway-db-tracking
          path: target-repo
          token: ${{ secrets.TARGET_REPO_TOKEN }}

      - name: Find latest version in target repository
        if: steps.validate-sql.outputs.should_skip == 'false'
        id: find-latest-version
        run: |
          echo "Finding the latest version in the target repository"
          cd target-repo/flyway/sql/
          LATEST_VERSION=$(ls V*__*.sql 2>/dev/null | grep -oP '^V\K\d+' | sort -n | tail -1 || echo "0")
          echo "Latest version found: ${LATEST_VERSION}"
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Increment version and rename file
        if: steps.validate-sql.outputs.should_skip == 'false'
        run: |
          echo "Incrementing version and renaming file"
          NEW_VERSION=$(( ${{ steps.find-latest-version.outputs.latest_version }} + 1 ))
          SQL_FILE=${{ steps.validate-sql.outputs.sql_file }}

          BASENAME=$(basename "$SQL_FILE")
          NEW_NAME="V${NEW_VERSION}__${BASENAME}"
          echo "Renaming $SQL_FILE to $NEW_NAME"
          cp "$SQL_FILE" "target-repo/flyway/sql/$NEW_NAME"

      - name: Commit and push changes
        if: steps.validate-sql.outputs.should_skip == 'false'
        run: |
          echo "Committing and pushing changes to target repository"
          NEW_VERSION=$(( ${{ steps.find-latest-version.outputs.latest_version }} + 1 ))
          cd target-repo
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add flyway/sql/
          git commit -m "Sync new SQL file with version increment V${NEW_VERSION}"
          git push
