name: Sync Latest SQL File to Target Repository

on:
  push:
    branches:
      - main  # Trigger only on changes to the main branch
    paths:
      - 'resources/sql/**'  # Trigger only when changes are made to files in /resources/sql/

jobs:
  sync-sql-files:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the current repository
      - name: Checkout current repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Identify the latest SQL file from the last commit
      - name: Find latest SQL file from last commit
        id: find-latest-file
        run: |
          echo "Finding the latest SQL file in /resources/sql/ from the last commit"

          # Get files modified in the last commit
          FILES=$(git diff-tree --no-commit-id --name-only -r HEAD -- 'resources/sql/')
          echo "${FILES}"

          if [ -z "$FILES" ]; then
            echo "No files found in /resources/sql/ in the last commit."
            exit 1
          fi

          # Select the first file (if multiple files were modified)
          LATEST_FILE=$(echo "$FILES" | head -1)

          echo "Latest file found: ${LATEST_FILE}"
          echo "latest_file=${LATEST_FILE}" >> $GITHUB_OUTPUT

      # Step 3: Checkout the target repository
      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: nadib-klf/database-migration
          path: target-repo
          token: ${{ secrets.TARGET_REPO_TOKEN }}  # Use the token from secrets

      # Step 4: Determine the latest version in the target repository
      - name: Find latest version in target repository
        id: find-latest-version
        run: |
          echo "Finding the latest version in the target repository"
          cd target-repo/flyway/sql/
          LATEST_VERSION=$(ls V*__*.sql 2>/dev/null | grep -oP '^V\K\d+' | sort -n | tail -1 || echo "0")
          echo "Latest version found: ${LATEST_VERSION}"
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      # Step 5: Increment the version and rename the latest file
      - name: Increment version and rename file
        run: |
          echo "Incrementing version and renaming file"
          NEW_VERSION=$(( ${{ steps.find-latest-version.outputs.latest_version }} + 1 ))
          LATEST_FILE=${{ steps.find-latest-file.outputs.latest_file }}

          if [ -n "$LATEST_FILE" ]; then
            BASENAME=$(basename "$LATEST_FILE")
            NEW_NAME="V${NEW_VERSION}__${BASENAME}"
            echo "Renaming $LATEST_FILE to $NEW_NAME"
            cp "$LATEST_FILE" "target-repo/flyway/sql/$NEW_NAME"
          else
            echo "No latest file found to process."
            exit 1
          fi

      # Step 6: Commit and push changes to the target repository
      - name: Commit and push changes to target repository
        run: |
          echo "Committing and pushing changes to target repository"
          NEW_VERSION=$(( ${{ steps.find-latest-version.outputs.latest_version }} + 1 ))
          cd target-repo
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add flyway/sql/
          git commit -m "Sync new SQL file with version increment V${NEW_VERSION}"
          git push
